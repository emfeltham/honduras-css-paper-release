// short captions
#let in-outline = state("in-outline", false)
#show outline: it => {
    in-outline.update(true)
    it
    in-outline.update(false)
}
#let flex-caption(long, short) = locate(loc => 
    if in-outline.at(loc) { short } else { long }
)

#import"@preview/tablex:0.0.8": tablex, gridx, hlinex, vlinex, colspanx, rowspanx, cellx

// table params
#let col1width = 10em
#let coliwidth = auto
#let name_align = left + horizon
// pkey 
#let ps = (super[$+$], super[$star.op$], super[$star.op star.op$], super[$star.op star.op star.op$], )
 
#figure(
    gridx(
        columns: (col1width, coliwidth, coliwidth, ),
        rows: (0.2em, 1.5em),
        align: center + horizon,
        stroke: auto,
        hlinex(y: 0, stroke: 0.05em),
        cellx(x: 0, y: 0, colspan: 3)[],
        hlinex(y: 1, stroke: 0.05em),
        cellx(x: 1, y: 1)[(TPR)],
        cellx(x: 2, y: 1)[(FPR)],
        hlinex(start: 1, y: 2, stroke: 0.05em),
        cellx(x: 0, y: 34, align: name_align)[dists_a_notinf & dists_a],
        cellx(x: 2, y: 34)[-3.1884#ps.at(3)],
        cellx(x: 2, y: 35)[[-3.284, -3.0928]],
        cellx(x: 0, y: 18, align: name_align)[educated: Yes],
        cellx(x: 1, y: 18)[-0.2391#ps.at(3)],
        cellx(x: 1, y: 19)[[-0.3396, -0.1386]],
        cellx(x: 2, y: 18)[-0.5223#ps.at(3)],
        cellx(x: 2, y: 19)[[-0.6215, -0.4232]],
        cellx(x: 0, y: 30, align: name_align)[dists_p_notinf & dists_p],
        cellx(x: 1, y: 30)[-2.0767#ps.at(3)],
        cellx(x: 1, y: 31)[[-2.2222, -1.9312]],
        cellx(x: 2, y: 30)[-1.464#ps.at(3)],
        cellx(x: 2, y: 31)[[-1.5661, -1.3619]],
        cellx(x: 0, y: 2, align: name_align)[(Intercept)],
        cellx(x: 1, y: 2)[0.6202#ps.at(3)],
        cellx(x: 1, y: 3)[[0.3831, 0.8574]],
        cellx(x: 2, y: 2)[-0.6657#ps.at(3)],
        cellx(x: 2, y: 3)[[-0.9218, -0.4096]],
        cellx(x: 0, y: 20, align: name_align)[wealth_d1_4],
        cellx(x: 1, y: 20)[-0.4279#ps.at(3)],
        cellx(x: 1, y: 21)[[-0.6247, -0.2312]],
        cellx(x: 2, y: 20)[-0.7591#ps.at(3)],
        cellx(x: 2, y: 21)[[-0.9539, -0.5642]],
        cellx(x: 0, y: 24, align: name_align)[isolation],
        cellx(x: 1, y: 24)[0.0286],
        cellx(x: 1, y: 25)[[-0.0985, 0.1558]],
        cellx(x: 2, y: 24)[0.0289],
        cellx(x: 2, y: 25)[[-0.1207, 0.1786]],
        cellx(x: 0, y: 12, align: name_align)[age],
        cellx(x: 1, y: 12)[1.2707#ps.at(3)],
        cellx(x: 1, y: 13)[[0.7579, 1.7834]],
        cellx(x: 2, y: 12)[0.3292],
        cellx(x: 2, y: 13)[[-0.1724, 0.8309]],
        cellx(x: 0, y: 10, align: name_align)[man],
        cellx(x: 1, y: 10)[0.0616#ps.at(1)],
        cellx(x: 1, y: 11)[[0.0022, 0.121]],
        cellx(x: 2, y: 10)[0.1441#ps.at(3)],
        cellx(x: 2, y: 11)[[0.0855, 0.2028]],
        cellx(x: 0, y: 16, align: name_align)[educated: Some],
        cellx(x: 1, y: 16)[-0.0989#ps.at(1)],
        cellx(x: 1, y: 17)[[-0.1792, -0.0186]],
        cellx(x: 2, y: 16)[-0.2802#ps.at(3)],
        cellx(x: 2, y: 17)[[-0.3588, -0.2017]],
        cellx(x: 0, y: 6, align: name_align)[relation: personal_private],
        cellx(x: 1, y: 6)[-0.482#ps.at(3)],
        cellx(x: 1, y: 7)[[-0.5106, -0.4533]],
        cellx(x: 2, y: 6)[-0.2488#ps.at(3)],
        cellx(x: 2, y: 7)[[-0.2637, -0.2339]],
        cellx(x: 0, y: 22, align: name_align)[coffee_cultivation],
        cellx(x: 1, y: 22)[0.2395#ps.at(3)],
        cellx(x: 1, y: 23)[[0.1154, 0.3636]],
        cellx(x: 2, y: 22)[0.2004#ps.at(1)],
        cellx(x: 2, y: 23)[[0.0538, 0.3469]],
        cellx(x: 0, y: 26, align: name_align)[population],
        cellx(x: 1, y: 26)[0.0002],
        cellx(x: 1, y: 27)[[-0.0002, 0.0006]],
        cellx(x: 2, y: 26)[0.0004#ps.at(0)],
        cellx(x: 2, y: 27)[[-0.0001, 0.0009]],
        cellx(x: 0, y: 4, align: name_align)[kin431],
        cellx(x: 1, y: 4)[2.7719#ps.at(3)],
        cellx(x: 1, y: 5)[[2.7361, 2.8076]],
        cellx(x: 2, y: 4)[3.1692#ps.at(3)],
        cellx(x: 2, y: 5)[[3.1464, 3.1921]],
        cellx(x: 0, y: 8, align: name_align)[degree],
        cellx(x: 1, y: 8)[0.3816#ps.at(3)],
        cellx(x: 1, y: 9)[[0.1868, 0.5765]],
        cellx(x: 2, y: 8)[-0.1472#ps.at(1)],
        cellx(x: 2, y: 9)[[-0.2663, -0.028]],
        cellx(x: 0, y: 28, align: name_align)[dists_p_notinf],
        cellx(x: 1, y: 28)[0.5322#ps.at(3)],
        cellx(x: 1, y: 29)[[0.452, 0.6124]],
        cellx(x: 2, y: 28)[0.4632#ps.at(3)],
        cellx(x: 2, y: 29)[[0.4082, 0.5182]],
        cellx(x: 0, y: 14, align: name_align)[age ^ 2],
        cellx(x: 1, y: 14)[-1.2178#ps.at(3)],
        cellx(x: 1, y: 15)[[-1.8538, -0.5818]],
        cellx(x: 2, y: 14)[1.2629#ps.at(3)],
        cellx(x: 2, y: 15)[[0.6399, 1.8859]],
        cellx(x: 0, y: 32, align: name_align)[dists_a_notinf],
        cellx(x: 2, y: 32)[0.742#ps.at(3)],
        cellx(x: 2, y: 33)[[0.6849, 0.7991]],
        hlinex(start: 1, y: 36, stroke: 0.05em),
        cellx(x: 0, y: 36, align: name_align)[perceiver var.],
        cellx(x: 0, y: 37, align: name_align)[village_code var.],
        cellx(x: 0, y: 38, align: name_align)[N#sub[groups]],
        cellx(x: 1, y: 36)[1.2056],
        cellx(x: 1, y: 37)[0.2045],
        cellx(x: 1, y: 38)[10014, 82],
        cellx(x: 2, y: 36)[1.3522],
        cellx(x: 2, y: 37)[0.2563],
        cellx(x: 2, y: 38)[10011, 82],
        hlinex(start: 1, y: 39, stroke: 0.05em),
        cellx(x: 0, y: 39, align: name_align)[N],
        cellx(x: 0, y: 41, align: name_align)[BIC],
        cellx(x: 0, y: 40, align: name_align)[AIC],
        cellx(x: 1, y: 39)[182557],
        cellx(x: 1, y: 41)[138964.59],
        cellx(x: 1, y: 40)[138792.6381],
        cellx(x: 2, y: 39)[489649],
        cellx(x: 2, y: 41)[468422.1502],
        cellx(x: 2, y: 40)[468211.2228],
        hlinex(y: 42, stroke: 0.1em),
        cellx(y: 42, colspan: 3, align: left)[Note: #ps.at(0)$p<0.1$; #ps.at(1)$p<0.05$; #ps.at(2)$p<0.005$; #ps.at(3)$p<0.001$],
    ),
        caption: flex-caption(
        [Social network response model. Models of the individual cognizer responses on the determinants of accuracy with for additional village characteristics.],
        [Social network response model]
    ),
    kind: table,
) <villagemodel>
