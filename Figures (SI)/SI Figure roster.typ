#import "@preview/tablex:0.0.8": tablex, cellx, gridx, hlinex, vlinex

#let in-outline = state("in-outline", false)
#show outline: it => {
    in-outline.update(true)
    it
    in-outline.update(false)
}

#let flex-caption(long, short) = locate(loc => 
    if in-outline.at(loc) { short } else { long }
)

#figure(
    grid(
        columns: 3,
        row-gutter: 2mm,
        column-gutter: 1mm,
        align: left,
        [#text(size: 18pt)[*a*]], [] , [#text(size: 18pt)[*b*]],
        [], [], [], 
        tablex( 
            columns: 9, 
            fill: none, 
            align: center + horizon, 
            cellx(x: 1, y: 0)[1], 
            cellx(x: 0, y: 1)[1], 
            cellx(x: 2, y: 0)[2], 
            cellx(x: 0, y: 2)[2], 
            cellx(x: 3, y: 0)[3], 
            cellx(x: 0, y: 3)[3], 
            cellx(x: 4, y: 0)[4], 
            cellx(x: 0, y: 4)[4], 
            cellx(x: 5, y: 0)[5], 
            cellx(x: 0, y: 5)[5], 
            cellx(x: 6, y: 0)[6], 
            cellx(x: 0, y: 6)[6], 
            cellx(x: 7, y: 0)[7], 
            cellx(x: 0, y: 7)[7], 
            cellx(x: 8, y: 0)[8], 
            cellx(x: 0, y: 8)[8], 
            cellx(x: 1, y: 1, fill: gray)[], 
            cellx(x: 2, y: 1, fill: gray)[], 
            cellx(x: 2, y: 2, fill: gray)[], 
            cellx(x: 3, y: 1, fill: gray)[], 
            cellx(x: 3, y: 2, fill: gray)[], 
            cellx(x: 3, y: 3, fill: gray)[], 
            cellx(x: 4, y: 1, fill: gray)[], 
            cellx(x: 4, y: 2, fill: gray)[], 
            cellx(x: 4, y: 3, fill: gray)[], 
            cellx(x: 4, y: 4, fill: gray)[], 
            cellx(x: 5, y: 1, fill: gray)[], 
            cellx(x: 5, y: 2, fill: gray)[], 
            cellx(x: 5, y: 3, fill: gray)[], 
            cellx(x: 5, y: 4, fill: gray)[], 
            cellx(x: 5, y: 5, fill: gray)[], 
            cellx(x: 6, y: 1, fill: gray)[], 
            cellx(x: 6, y: 2, fill: gray)[], 
            cellx(x: 6, y: 3, fill: gray)[], 
            cellx(x: 6, y: 4, fill: gray)[], 
            cellx(x: 6, y: 5, fill: gray)[], 
            cellx(x: 6, y: 6, fill: gray)[], 
            cellx(x: 7, y: 1, fill: gray)[], 
            cellx(x: 7, y: 2, fill: gray)[], 
            cellx(x: 7, y: 3, fill: gray)[], 
            cellx(x: 7, y: 4, fill: gray)[], 
            cellx(x: 7, y: 5, fill: gray)[], 
            cellx(x: 7, y: 6, fill: gray)[], 
            cellx(x: 7, y: 7, fill: gray)[], 
            cellx(x: 8, y: 1, fill: gray)[], 
            cellx(x: 8, y: 2, fill: gray)[], 
            cellx(x: 8, y: 3, fill: gray)[], 
            cellx(x: 8, y: 4, fill: gray)[], 
            cellx(x: 8, y: 5, fill: gray)[], 
            cellx(x: 8, y: 6, fill: gray)[], 
            cellx(x: 8, y: 7, fill: gray)[], 
            cellx(x: 8, y: 8, fill: gray)[], 
        ),
        gridx(
                columns: 1,
                align: center + horizon,
                cellx(x: 0, y: 6, align: center + horizon)[#text(size: 30pt)[‚ü∂]],
        ),
        tablex( 
            columns: 9, 
            fill: none, 
            align: center + horizon, 
            cellx(x: 1, y: 0)[1], 
            cellx(x: 0, y: 1)[1], 
            cellx(x: 2, y: 0)[2], 
            cellx(x: 0, y: 2)[2], 
            cellx(x: 3, y: 0)[3], 
            cellx(x: 0, y: 3)[3], 
            cellx(x: 4, y: 0)[4], 
            cellx(x: 0, y: 4)[4], 
            cellx(x: 5, y: 0)[5], 
            cellx(x: 0, y: 5)[5], 
            cellx(x: 6, y: 0)[6], 
            cellx(x: 0, y: 6)[6], 
            cellx(x: 7, y: 0)[7], 
            cellx(x: 0, y: 7)[7], 
            cellx(x: 8, y: 0)[8], 
            cellx(x: 0, y: 8)[8], 
            cellx(x: 1, y: 1, fill: gray)[], 
            cellx(x: 2, y: 1, fill: gray)[], 
            cellx(x: 2, y: 2, fill: gray)[], 
            cellx(x: 3, y: 1, fill: gray)[], 
            cellx(x: 3, y: 2, fill: gray)[], 
            cellx(x: 3, y: 3, fill: gray)[], 
            cellx(x: 4, y: 1, fill: gray)[], 
            cellx(x: 4, y: 2, fill: gray)[], 
            cellx(x: 4, y: 3, fill: gray)[], 
            cellx(x: 4, y: 4, fill: gray)[], 
            cellx(x: 5, y: 1, fill: gray)[], 
            cellx(x: 5, y: 2, fill: gray)[], 
            cellx(x: 5, y: 3, fill: gray)[], 
            cellx(x: 5, y: 4, fill: gray)[], 
            cellx(x: 5, y: 5, fill: gray)[], 
            cellx(x: 6, y: 1, fill: gray)[], 
            cellx(x: 6, y: 2, fill: gray)[], 
            cellx(x: 6, y: 3, fill: gray)[], 
            cellx(x: 6, y: 4, fill: gray)[], 
            cellx(x: 6, y: 5, fill: gray)[], 
            cellx(x: 6, y: 6, fill: gray)[], 
            cellx(x: 7, y: 1, fill: gray)[], 
            cellx(x: 7, y: 2, fill: gray)[], 
            cellx(x: 7, y: 3, fill: gray)[], 
            cellx(x: 7, y: 4, fill: gray)[], 
            cellx(x: 7, y: 5, fill: gray)[], 
            cellx(x: 7, y: 6, fill: gray)[], 
            cellx(x: 7, y: 7, fill: gray)[], 
            cellx(x: 8, y: 1, fill: gray)[], 
            cellx(x: 8, y: 2, fill: gray)[], 
            cellx(x: 8, y: 3, fill: gray)[], 
            cellx(x: 8, y: 4, fill: gray)[], 
            cellx(x: 8, y: 5, fill: gray)[], 
            cellx(x: 8, y: 6, fill: gray)[], 
            cellx(x: 8, y: 7, fill: gray)[], 
            cellx(x: 8, y: 8, fill: gray)[], 
            cellx(x: 1, y: 2, fill: red)[], 
            cellx(x: 1, y: 3, fill: blue)[], 
            cellx(x: 1, y: 4, fill: blue)[], 
            cellx(x: 1, y: 5, fill: blue)[], 
            cellx(x: 1, y: 6, fill: blue)[], 
            cellx(x: 1, y: 7, fill: blue)[], 
            cellx(x: 1, y: 8, fill: red)[], 
            cellx(x: 2, y: 3, fill: red)[], 
            cellx(x: 2, y: 4, fill: red)[], 
            cellx(x: 2, y: 5, fill: blue)[], 
            cellx(x: 2, y: 6, fill: red)[], 
            cellx(x: 2, y: 7, fill: red)[], 
            cellx(x: 2, y: 8, fill: blue)[], 
            cellx(x: 3, y: 4, fill: red)[], 
            cellx(x: 3, y: 5, fill: red)[], 
            cellx(x: 3, y: 6, fill: blue)[], 
            cellx(x: 3, y: 7, fill: blue)[], 
            cellx(x: 3, y: 8, fill: red)[], 
            cellx(x: 4, y: 5, fill: red)[], 
            cellx(x: 4, y: 6, fill: blue)[], 
            cellx(x: 4, y: 7, fill: blue)[], 
            cellx(x: 4, y: 8, fill: red)[], 
            cellx(x: 5, y: 6, fill: red)[], 
            cellx(x: 5, y: 7, fill: blue)[], 
            cellx(x: 5, y: 8, fill: red)[], 
            cellx(x: 6, y: 7, fill: blue)[], 
            cellx(x: 6, y: 8, fill: red)[], 
            cellx(x: 7, y: 8, fill: red)[], 
        ),
    ),
    caption: flex-caption([Roster method. In traditional designs, respondents are presented with a blank adjacency matrix *(a)*, and are asked to fill it out for the possible relationships between five individuals. Subjects do not fill out the upper triangular, since they are queried about symmetric ties. Respondents state *(b)* whether they believe that a relationship exists (blue response), or does not exist (red response) between all possible symmetric pairs.], [Roster method.]),
    kind: image
) <roster> 
